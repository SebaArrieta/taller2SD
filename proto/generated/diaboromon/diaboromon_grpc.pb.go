// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: diaboromon.proto

package diaboromon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Diaboromon_Attack_FullMethodName      = "/diaboromon.Diaboromon/Attack"
	Diaboromon_TaiDefeated_FullMethodName = "/diaboromon.Diaboromon/TaiDefeated"
)

// DiaboromonClient is the client API for Diaboromon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiaboromonClient interface {
	Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error)
	TaiDefeated(ctx context.Context, in *DefeatRequest, opts ...grpc.CallOption) (*DefeatResponse, error)
}

type diaboromonClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaboromonClient(cc grpc.ClientConnInterface) DiaboromonClient {
	return &diaboromonClient{cc}
}

func (c *diaboromonClient) Attack(ctx context.Context, in *AttackRequest, opts ...grpc.CallOption) (*AttackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttackResponse)
	err := c.cc.Invoke(ctx, Diaboromon_Attack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaboromonClient) TaiDefeated(ctx context.Context, in *DefeatRequest, opts ...grpc.CallOption) (*DefeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DefeatResponse)
	err := c.cc.Invoke(ctx, Diaboromon_TaiDefeated_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaboromonServer is the server API for Diaboromon service.
// All implementations must embed UnimplementedDiaboromonServer
// for forward compatibility.
type DiaboromonServer interface {
	Attack(context.Context, *AttackRequest) (*AttackResponse, error)
	TaiDefeated(context.Context, *DefeatRequest) (*DefeatResponse, error)
	mustEmbedUnimplementedDiaboromonServer()
}

// UnimplementedDiaboromonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiaboromonServer struct{}

func (UnimplementedDiaboromonServer) Attack(context.Context, *AttackRequest) (*AttackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attack not implemented")
}
func (UnimplementedDiaboromonServer) TaiDefeated(context.Context, *DefeatRequest) (*DefeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaiDefeated not implemented")
}
func (UnimplementedDiaboromonServer) mustEmbedUnimplementedDiaboromonServer() {}
func (UnimplementedDiaboromonServer) testEmbeddedByValue()                    {}

// UnsafeDiaboromonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaboromonServer will
// result in compilation errors.
type UnsafeDiaboromonServer interface {
	mustEmbedUnimplementedDiaboromonServer()
}

func RegisterDiaboromonServer(s grpc.ServiceRegistrar, srv DiaboromonServer) {
	// If the following call pancis, it indicates UnimplementedDiaboromonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Diaboromon_ServiceDesc, srv)
}

func _Diaboromon_Attack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaboromonServer).Attack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Diaboromon_Attack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaboromonServer).Attack(ctx, req.(*AttackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diaboromon_TaiDefeated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaboromonServer).TaiDefeated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Diaboromon_TaiDefeated_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaboromonServer).TaiDefeated(ctx, req.(*DefeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Diaboromon_ServiceDesc is the grpc.ServiceDesc for Diaboromon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Diaboromon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diaboromon.Diaboromon",
	HandlerType: (*DiaboromonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attack",
			Handler:    _Diaboromon_Attack_Handler,
		},
		{
			MethodName: "TaiDefeated",
			Handler:    _Diaboromon_TaiDefeated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diaboromon.proto",
}
